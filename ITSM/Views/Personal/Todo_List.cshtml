@using ITSM_DomainModelEntity.ViewModels
@model TodoVM
@{
    ViewData["Title"] = "Todo_List";
    Layout = "_Layout";
}

<style>
    .inc-tab-dropdown {
        position: relative;
        display: inline-block;
    }
    
    .inc-tab-dropdown-menu {
        position: absolute;
        background-color: #323436;
        min-width: 160px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
        border-radius: 4px;
        margin-top: 5px;
    }
    
    .inc-tab-dropdown-item {
        color: white;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
    }
    
    .inc-tab-dropdown-item:hover {
            color: white;
            text-decoration: none;
            background-color: #575859;
    }
    
    .inc-tab-incidents-table th.number-column {
        width: 15%;
    }
    
    .inc-tab-incidents-table th.title-column {
        width: 35%;
    }
    
    .inc-tab-incidents-table th.create-date-column {
        width: 19%;
    }
    
    .inc-tab-incidents-table th.update-date-column {
        width: 19%;
    }
    
    .inc-tab-incidents-table th.active-column {
        width: 12%;
    }

    .item-delete-btn{
        background: #6b0421;
    }

    .item-delete-btn:hover {
        background: #4f0217;
    }
    
    .inc-tab-pagination-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .todo-page {
        display: none;
    }
    
    .todo-page.active {
        display: table-row;
    }

    .inc-tab-incident-number a{
        text-decoration:none;
    }

    .inc-tab-incident-number a:hover {
        text-decoration: none;
    }
</style>

<div class="inc-tab-container">
    <header>
        <div class="inc-tab-header-left">
            <button class="inc-tab-icon-button">
                <i class="fas fa-list"></i>
            </button>
            <h2 class="all-title-header-front">All Todo</h2>
            <div class="inc-tab-dropdown">
                <button class="inc-tab-dropdown-toggle" id="filterDropdown">Number <i class="fas fa-chevron-down"></i></button>
                <div class="inc-tab-dropdown-menu" id="filterMenu" style="display:none;">
                    <a href="#" class="inc-tab-dropdown-item" data-filter="number">Number</a>
                    <a href="#" class="inc-tab-dropdown-item" data-filter="title">Title</a>
                    <a href="#" class="inc-tab-dropdown-item" data-filter="create_date">Create Date</a>
                </div>
            </div>
            <div class="inc-tab-search-container">
                <input type="text" placeholder="Search" class="inc-tab-search-input" id="searchInput">
            </div>
        </div>
        <div class="inc-tab-header-right">
            <button class="inc-tab-icon-button" id="refreshButton">
                <i class="fas fa-sync-alt"></i>
            </button>
            <button class="inc-cre-btn inc-cre-btn-icon" onclick="window.open('/Info/Info_Personal_Todo', '_blank')">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
                    <line x1="12" y1="17" x2="12.01" y2="17"></line>
                </svg>
            </button>
            <div class="inc-tab-dropdown">
                <button class="inc-tab-dropdown-toggle" id="statusDropdown">All <i class="fas fa-chevron-down"></i></button>
                <div class="inc-tab-dropdown-menu" id="statusMenu" style="display:none;">
                    <a href="#" class="inc-tab-dropdown-item" data-status="all">All</a>
                    <a href="#" class="inc-tab-dropdown-item" data-status="doing">Doing</a>
                    <a href="#" class="inc-tab-dropdown-item" data-status="completed">Completed</a>
                </div>
            </div>
            <button class="inc-tab-new-button item-delete-btn" id="deleteButton" disabled>Delete</button>
            <button class="inc-tab-new-button" onclick="window.location.href='/Personal/Todo_Create';">New</button>
            <div class="nav-item navbar-dropdown dropdown-user dropdown open-button">
                <a class="nav-link dropdown-toggle hide-arrow p-0"
                href="javascript:void(0);"
                data-bs-toggle="dropdown">
                    <div class="avatar avatar-online">
                        <img src="@(Model.User.photo != null ? "data:image/jpeg;base64," + Convert.ToBase64String(Model.User.photo) :
                        Url.Content("~/img/avatar/user_avatar.jpg"))" alt="avatar" class="w-px-40 h-auto rounded-circle" />
                    </div>
                </a>
            </div>
        </div>
    </header>

    <div class="inc-tab-table-options">
        <div class="inc-tab-checkbox-container">
            <input type="checkbox" id="select-all">
        </div>
        <span class="inc-tab-all-text">All</span>
    </div>

    <div class="inc-tab-table-container">
        <table class="inc-tab-incidents-table">
            <thead>
                <tr>
                    <th class="inc-tab-checkbox-column"></th>
                    <th class="inc-tab-sortable number-column" id="sortByNumber">Number <i class="fas fa-arrow-up" id="sortIcon"></i></th>
                    <th class="title-column">title</th>
                    <th class="create-date-column">create_date</th>
                    <th class="update-date-column">update_date</th>
                    <th class="active-column">active</th>
                </tr>
            </thead>
            <tbody id="todoTableBody">

                @foreach(var i in Model.Todo)
                {
                    <tr class="todo-item" data-id="@i.id">
                        <td><input type="checkbox" class="item-checkbox"></td>
                        <td class="inc-tab-incident-number" data-label="Number">
                            <a href="~/Personal/Todo_Edit?id=@i.id">@i.todo_id</a>
                        </td>
                        <td data-label="title">@i.title</td>
                        <td data-label="create date">@i.create_date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td data-label="update date">@i.update_date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td data-label="active">@((i.active == true) ? "Completed" : "Doing")</td>
                    </tr>
                }
                
            </tbody>
        </table>
    </div>

    <div class="inc-tab-pagination">
        <button class="inc-tab-pagination-button" id="firstPageBtn" disabled><i class="fas fa-angle-double-left"></i></button>
        <button class="inc-tab-pagination-button" id="prevPageBtn" disabled><i class="fas fa-angle-left"></i></button>
        <span class="inc-tab-pagination-info" id="paginationInfo">-</span>
        <button class="inc-tab-pagination-button" id="nextPageBtn"><i class="fas fa-angle-right"></i></button>
        <button class="inc-tab-pagination-button" id="lastPageBtn"><i class="fas fa-angle-double-right"></i></button>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script>
    $(function () {
      var $target = $('#Prosonal_menu');
      if (!$target.hasClass('active') || !$target.hasClass('open')) {
          $('.menu-item').removeClass('active open');
          $target.addClass('active open');
      }

      $('#Prosonal_menu_todo').addClass("active");
      
      var currentPage = 1;
      var itemsPerPage = 10;
      var totalItems = $('.todo-item').length;
      var totalPages = Math.ceil(totalItems / itemsPerPage);

      // Set default filter field and status
      var currentFilter = 'number';
      var currentStatus = 'all';

      // Initialize pagination
      initPagination();

      // Close all dropdown menus when clicking outside
      $(document).click(function(e) {
          if (!$(e.target).closest('.inc-tab-dropdown').length) {
              $('.inc-tab-dropdown-menu').hide();
          }
      });

      // Toggle filter dropdown menu
      $('#filterDropdown').click(function(e) {
          e.stopPropagation();
          $('#filterMenu').toggle();
          $('#statusMenu').hide();
      });

      // Toggle status dropdown menu
      $('#statusDropdown').click(function(e) {
          e.stopPropagation();
          $('#statusMenu').toggle();
          $('#filterMenu').hide();
      });

      // Click filter option
      $('.inc-tab-dropdown-item[data-filter]').click(function(e) {
          e.preventDefault();
          var filter = $(this).data('filter');
          $('#filterDropdown').text($(this).text() + ' ');
          $('#filterDropdown').append('<i class="fas fa-chevron-down"></i>');
          $('#filterMenu').hide();

          // Update current filter field
          currentFilter = filter;

          // If search box is not empty, perform search
          if ($('#searchInput').val().trim() !== '') {
              searchTodos();
          }
      });

      // Click status option
      $('.inc-tab-dropdown-item[data-status]').click(function(e) {
          e.preventDefault();
          var status = $(this).data('status');
          $('#statusDropdown').text($(this).text() + ' ');
          $('#statusDropdown').append('<i class="fas fa-chevron-down"></i>');
          $('#statusMenu').hide();

          // Update current status
          currentStatus = status;

          // Perform status filtering
          filterByStatus();
      });

      // Select all checkbox functionality
      $('#table-select-all, #select-all').change(function() {
          var isChecked = $(this).prop('checked');
          $('.item-checkbox').prop('checked', isChecked);
          
          // Synchronize another Select All checkbox
          if (this.id === 'table-select-all') {
              $('#select-all').prop('checked', isChecked);
          } else {
              $('#table-select-all').prop('checked', isChecked);
          }
      });
      
      // Pagination button event
      $('#firstPageBtn').click(function() {
          if ($(this).prop('disabled')) return;
          currentPage = 1;
          applyPagination();
          updatePaginationInfo();
          updatePaginationButtons();
      });
      
      $('#prevPageBtn').click(function() {
          if ($(this).prop('disabled')) return;
          currentPage--;
          applyPagination();
          updatePaginationInfo();
          updatePaginationButtons();
      });
      
      $('#nextPageBtn').click(function() {
          if ($(this).prop('disabled')) return;
          currentPage++;
          applyPagination();
          updatePaginationInfo();
          updatePaginationButtons();
      });
      
      $('#lastPageBtn').click(function() {
          if ($(this).prop('disabled')) return;
          currentPage = totalPages;
          applyPagination();
          updatePaginationInfo();
          updatePaginationButtons();
      });

          // Search box input event
      $('#searchInput').on('keyup', function() {
          searchTodos();
      });
      
      // Refresh button click event
      $('#refreshButton').click(function() {
          location.reload();
      });
      
      // Initialize the paging system
      function initPagination() {
          // Calculate total items and pages
          totalItems = $('.todo-item').length;
          totalPages = Math.ceil(totalItems / itemsPerPage);
          
          // Show first page content
          applyPagination();
          
          // Update paging information and button status
          updatePaginationInfo();
          updatePaginationButtons();
      }
      
      // Sort variable
      var currentSortOrder = 'asc'; // Default ascending order
      
      // Sort by Number click event
      $('#sortByNumber').click(function() {
          // Toggle sort order
          currentSortOrder = currentSortOrder === 'asc' ? 'desc' : 'asc';
          
          // Update sort icon
          if (currentSortOrder === 'asc') {
              $('#sortIcon').removeClass('fa-arrow-down').addClass('fa-arrow-up');
          } else {
              $('#sortIcon').removeClass('fa-arrow-up').addClass('fa-arrow-down');
          }
          
          // Call the sort API
          sortTodos();
      });
      
      // Sort todos function
      function sortTodos() {
          $.ajax({
              url: '/Ajax/SortTodo',
              method: 'GET',
              data: {
                  sortOrder: currentSortOrder
              },
              success: function(data) {
                  updateTodoTable(data);

                  // Reset pagination
                  resetPagination();
              },
              error: function(error) {
                  errorLogin(error);
                  // console.error('Sort Error:', error);
              }
          });
      }
      
      // Check selection and toggle delete button
      function checkSelection() {
          var hasChecked = $('.item-checkbox:checked').length > 0;
          $('#deleteButton').prop('disabled', !hasChecked);
      }
      
      // Handle checkbox changes
      $(document).on('change', '.item-checkbox', function() {
          checkSelection();
      });
      
      // Handle table-select-all checkbox
      $(document).on('change', '#table-select-all, #select-all', function() {
          var isChecked = $(this).prop('checked');
          $('.item-checkbox').prop('checked', isChecked);
          
          // Sync the other select-all checkbox
          if (this.id === 'table-select-all') {
              $('#select-all').prop('checked', isChecked);
          } else {
              $('#table-select-all').prop('checked', isChecked);
          }
          
          // Check if delete button should be enabled
          checkSelection();
      });
      
      // Delete button click event
      $('#deleteButton').click(function() {
          if ($(this).prop('disabled')) return;
          
          // Get all selected todo IDs
          var selectedIds = [];
          $('.item-checkbox:checked').each(function() {
              var todoId = $(this).closest('tr').attr('data-id');
              if (todoId) {
                  selectedIds.push(parseInt(todoId));
              }
          });
          
          // If no items selected, do nothing
          if (selectedIds.length === 0) {
              return;
          }
          
          // Send delete request
          $.ajax({
              url: '/Ajax/DeleteTodos',
              method: 'POST',
              contentType: 'application/json',
              data: JSON.stringify(selectedIds),
              success: function(response) {
                  if (response.success) {
                      // Remove deleted items from table
                      $('.item-checkbox:checked').closest('tr').remove();
                      
                      // Uncheck select-all checkboxes
                      $('#select-all, #table-select-all').prop('checked', false);
                      
                      // Disable delete button
                      $('#deleteButton').prop('disabled', true);
                      
                      // Reset pagination
                      resetPagination();
                  }
              },
              error: function(error) {
                  errorLogin(error);
                  // console.error('Delete Error:', error);
              }
          });
      });
      
      // Apply paging Function
      function applyPagination() {
          // Hide all items
          $('.todo-item').hide();
          
          // Calculate the start and end index of the current page
          var start = (currentPage - 1) * itemsPerPage;
          var end = start + itemsPerPage;
          
          // Show only items on the current page
          $('.todo-item').each(function(index) {
              if (index >= start && index < end) {
                  $(this).show();
              }
          });
      }
      
      // Update paging information Function
      function updatePaginationInfo() {
          // Calculates the range of items currently displayed
          var totalItems = $('.todo-item').length;
          
          if (totalItems === 0) {
              $('#paginationInfo').text('0 items');
              return;
          }
          
          // Calculate the range of items displayed on the current page
          var start = (currentPage - 1) * itemsPerPage + 1;
          var end = Math.min(currentPage * itemsPerPage, totalItems);
          
          // Total items
          $('#paginationInfo').text(start + ' to ' + end + ' of ' + totalItems);
      }
      
      // Reset pagination Function
      function resetPagination() {
          // Reset to first page
          currentPage = 1;
          
          // Recalculate total items and pages
          totalItems = $('.todo-item').length;
          totalPages = Math.ceil(totalItems / itemsPerPage);
          
          // Apply paging
          applyPagination();
          updatePaginationInfo();
          updatePaginationButtons();
      }
      
      // Update the paging button status
      function updatePaginationButtons() {
          $('#firstPageBtn, #prevPageBtn').prop('disabled', currentPage === 1);
          $('#nextPageBtn, #lastPageBtn').prop('disabled', currentPage === totalPages || totalItems === 0);
      }
      
      // Search Todo List Function
      function searchTodos() {
          var searchTerm = $('#searchInput').val().trim();
          if (searchTerm === '') {
              // If the search box is empty, refresh the page
              location.reload();
              return;
          }
          
          $.ajax({
              url: '/Ajax/SearchTodo',
              method: 'GET',
              data: {
                  searchTerm: searchTerm,
                  filterBy: currentFilter
              },
              success: function(data) {
                  updateTodoTable(data);
                  if (currentStatus !== 'all') {
                      filterTableByStatus(currentStatus);
                  }
                  
                  // Reset pagination
                  resetPagination();
              },
              error: function(error) {
                  errorLogin(error);
                  // console.error('Search Error:', error);
              }
          });
      }
      
      // Filter Select
      function filterByStatus() {
          if (currentStatus === 'all') {
              // Filter All active
              if ($('#searchInput').val().trim() !== '') {
                  searchTodos();
              } else {
                  location.reload();
              }
              return;
          }
          
          $.ajax({
              url: '/Ajax/FilterTodoByStatus',
              method: 'GET',
              data: {
                  status: currentStatus
              },
              success: function(data) {
                  updateTodoTable(data);
                  
                  // Reset pagination
                  resetPagination();
              },
              error: function(error) {
                  errorLogin(error);
                  // console.error('Filter Error:', error);
              }
          });
      }
      
      // Filter Active
      function filterTableByStatus(status) {
          if (status === 'all') return;
          
          var rows = $('#todoTableBody tr');
          rows.each(function() {
              var statusCell = $(this).find('td:last-child').text().trim();
              if ((status === 'doing' && statusCell === 'Doing') || 
                  (status === 'completed' && statusCell === 'Completed')) {
                  $(this).show();
              } else {
                  $(this).hide();
              }
          });
          
          // Reset pagination
          resetPagination();
      }
      
      // 添加日期格式化函数
      function formatDate(dateString) {
          if (!dateString) return '-';
          const date = new Date(dateString);
          const year = date.getFullYear();
          const month = String(date.getMonth() + 1).padStart(2, '0');
          const day = String(date.getDate()).padStart(2, '0');
          const hours = String(date.getHours()).padStart(2, '0');
          const minutes = String(date.getMinutes()).padStart(2, '0');
          const seconds = String(date.getSeconds()).padStart(2, '0');
          return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
      }
      
      // Update Todo table function
      function updateTodoTable(data) {
          var tableBody = $('#todoTableBody');
          tableBody.empty();
          
          if (data.length === 0) {
              tableBody.append('<tr><td colspan="6" class="text-center">No matching todos found</td></tr>');
              totalItems = 0;
              totalPages = 0;
              updatePaginationInfo();
              updatePaginationButtons();
              return;
          }
          
          $.each(data, function(index, todo) {
              var row = `
                  <tr class="todo-item" data-id="${todo.id}">
                      <td><input type="checkbox" class="item-checkbox"></td>
                      <td class="inc-tab-incident-number" data-label="Number">
                          <a href="/Personal/Todo_Edit?id=${todo.id}">${todo.todo_id}
                      </td>
                      <td data-label="title">${todo.title}</td>
                      <td data-label="create_date">${formatDate(todo.create_date)}</td>
                      <td data-label="update_date">${todo.update_date}</td>
                      <td data-label="active">${todo.active ? "Completed" : "Doing"}</td>
                  </tr>
              `;
              tableBody.append(row);
            });
          
          // Reinitialize paging
          initPagination();
          
          // Check for selections
          checkSelection();
      }

      // No login Function
      function errorLogin(error){
        const msg = error?.responseJSON?.message;

        if (msg === "Not logged in"){
            window.location.href="/Auth/Login";
        }
      }
  });
</script>